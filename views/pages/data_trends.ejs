<%- include ('../partials/headers_logged_in') %>

<main class="mb-48 flex flex-col">
    <div class="container mx-auto pt-10">
        <div class="text-center">
            <p class="text-3xl p-1 font-semibold text-gray-400 mb-8">Enter a song... and see when people are listening!</p>
        </div>
        <div class="text-center">
            <!-- Search Bar -->
            <form action="/monthly_listens" method="GET">
            <input id="song_id" name="song_id" class="bg-stone-200 p-4 rounded-xl text-xl"></input>
            <!-- <a href="/search_song?q=Gunna"> -->
            <button type="submit" class="ml-1 p-4 rounded-xl bg-black text-white text-xl font-semibold">Show Stats &nbsp;üîç</button>
            <!-- </a> -->
            </form>
        </div>
        <div class="pt-16 max-w-5xl place-content-center">
            <div class="chartCard">
                <div class="chartBox">
                    <canvas id="myChart"></canvas>
                </div>
            </div>
        </div>
    </div>


    

    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // setup 
        const date = new Date();
        let current_month = date.getMonth();
        //current_month = 0;
        const min_month = current_month - 5;
        const max_month = current_month;




        const monthly_data = [<%= monthly_data %>];
        const data = {
            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            datasets: [{
                label: 'Listens',
                data: monthly_data,  // [18, 12, 6, 9, 12, 3, 9, 1, 19, 13, 4, 9]
                backgroundColor: [
                    'rgba(255, 26, 104, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 26, 104, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        };

        // moveChart block
        const moveChart = {     //scrollable x-axis functionality
            id: 'moveChart',
            afterEvent(chart, args) {
                const { ctx, canvas, chartArea: { left, right, top, bottom, width, height } } = chart;
                canvas.addEventListener('mousemove', (event) => {
                    const x = args.event.x;
                    const y = args.event.y;
                    //console.log('x:' + x + ' - ' + 'y:' + y)   //gives x and y coordinates of hover event
                    if (x >= left - 15 && x <= left + 15 && y >= height / 2 + top - 15 && y <= height / 2 + top + 15) {
                        canvas.style.cursor = 'pointer';    //chage to pointer when hovering over button
                    } else if (x >= right - 15 && x <= right + 15 && y >= height / 2 + top - 15 && y <= height / 2 + top + 15) {
                        canvas.style.cursor = 'pointer';
                    } else {
                        canvas.style.cursor = 'default';
                    }
                })
            },
            afterDraw(chart, args, pluginOptions) {
                const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
                const angle = Math.PI / 180;

                class CircleChevron {
                    //constructor(x1,y1) {

                    //}
                    draw(ctx, x1, pixel) {
                        ctx.beginPath();
                        ctx.lineWidth = 3; //make a circle of 3 pixels for button
                        ctx.strokeStyle = 'rgba(102, 102, 102, 0.5)';
                        ctx.fillStyle = 'white';   //customizing button colors
                        ctx.arc(x1, height / 2 + top, 15, angle * 0, angle * 360, false)   //ctx.arc(x, y, radius, angleS, angleE, false)
                        ctx.stroke();
                        ctx.fill();
                        ctx.closePath();

                        ctx.beginPath(); //add arrow (chevron)
                        ctx.lineWidth = 3;
                        ctx.strokeStyle = 'rgba(255, 26, 104, 1)';
                        ctx.moveTo(x1 + pixel, height / 2 + top - 7.5);
                        ctx.lineTo(x1 - pixel, height / 2 + top);
                        ctx.lineTo(x1 + pixel, height / 2 + top + 7.5);
                        ctx.stroke();
                        ctx.closePath();
                    }
                }

                let drawCircleLeft = new CircleChevron();
                drawCircleLeft.draw(ctx, left, 5);

                let drawCircleRight = new CircleChevron();
                drawCircleRight.draw(ctx, right, -5);
            }
        }


        // config 
        const config = {
            type: 'bar',
            data,
            options: {
                layout: {
                    padding: {
                        right: 18
                    }
                },
                scales: {
                    x: {
                        min: min_month,
                        max: max_month
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            },
            plugins: [moveChart]
        };

        // render init block
        const myChart = new Chart(
            document.getElementById('myChart'),
            config
        );

        function moveScroll() {    //arrows become functional scrolling through data
            const { ctx, canvas, chartArea: { left, right, top, bottom, width, height } } = myChart;
            canvas.addEventListener('click', (event) => {
                const rect = canvas.getBoundingClientRect();
                const x = event.clientX - rect.left;
                const y = event.clientY - rect.top;

                if (x >= left - 15 && x <= left + 15 && y >= height / 2 + top - 15 && y <= height / 2 + top + 15) {  //scroll left
                    myChart.options.scales.x.min = myChart.options.scales.x.min - 1;
                    myChart.options.scales.x.max = myChart.options.scales.x.max - 1;
                    if (myChart.options.scales.x.min <= 0) {
                        myChart.options.scales.x.min = 0;
                        myChart.options.scales.x.max = 5;
                    }
                }
                if (x >= right - 15 && x <= right + 15 && y >= height / 2 + top - 15 && y <= height / 2 + top + 15) {   //scroll right
                    myChart.options.scales.x.min = myChart.options.scales.x.min + 1;
                    myChart.options.scales.x.max = myChart.options.scales.x.max + 1;
                    if (myChart.options.scales.x.max >= data.datasets[0].data.length) {
                        myChart.options.scales.x.min = data.datasets[0].data.length - 6;
                        myChart.options.scales.x.max = data.datasets[0].data.length - 1;
                    }
                }
                myChart.update();
            })
        }
        myChart.ctx.onclick = moveScroll();
    </script>
</main>

<%- include ('../partials/footer') %>